// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {Test, console} from "forge-std/Test.sol";
import {Zapper, typer} from "../src/Zapper.sol";
import { IERC20 } from "openzeppelin-contracts/contracts/interfaces/IERC20.sol";

contract ZapperTest is Test {
	Zapper public zapper;
	address public router = 0x506a777a65730D483f07089d1ecdFE947a8c3fEa;
	address public manager = 0x6Ceec9fA9269F0807797A9f05522fe70DB8d4f90;
	address public USDC = 0xA8CE8aee21bC2A48a5EF670afCc9274C7bbbC035;
	address public user = 0x0f7bF2e6BEbf3d352405B0f855d4B6fC6Fe50b3F;
	address public WETH9 = 0xE9CC37904875B459Fa5D0FE37680d36F1ED55e38;
	address public USDT = 0x1E4a5963aBFD975d8c9021ce480b42188849D41d;
	address public ASTR = 0xdf41220C7e322bFEF933D85D01821ad277f90172;
	address public vASTR = 0x7746ef546d562b443AE4B4145541a3b1a3D75717;
	

	function setUp() public {
		zapper = new Zapper(router, manager, WETH9);
		vm.startPrank(address(this));
		zapper.approver(USDC, 10000000000000000000000000);
		zapper.approver(WETH9, 10000000000000000000000000);
		zapper.approver(USDC, 10000000000000000000000000);
		zapper.approver(WETH9, 1000000000000000000000000);
		zapper.approver(USDT, 10000000000000000000000000);
		zapper.approver(USDT, 10000000000000000000000000);
		zapper.approver(ASTR, 10000000000000000000000000);
		zapper.approver(ASTR, 10000000000000000000000000);
		zapper.approver(vASTR, 10000000000000000000000000);
		zapper.approver(vASTR, 10000000000000000000000000);
		
		vm.stopPrank();
		IERC20 usdc = IERC20(USDC);
		IERC20 weth9 = IERC20(WETH9);
		IERC20 usdt = IERC20(USDT);
		IERC20 astr = IERC20(ASTR);
		IERC20 vastr = IERC20(vASTR);
		
		vm.startPrank(user);
		usdc.approve(address(zapper), 1000000000000000000000);
		weth9.approve(address(zapper), 10000000000000000000000000);
		usdt.approve(address(zapper), 10000000000000000000000000);
		astr.approve(address(zapper), 10000000000000000000000000);
		vastr.approve(address(zapper), 10000000000000000000000000);
		vm.stopPrank();
		console.log("zapper:", address(zapper));

	}
	
	function testZapFromEth() public payable {
		uint beforeValue = IERC20(manager).balanceOf(user);
		bytes[] memory data = new bytes[](1);
		data[0] = hex"04e45aaf000000000000000000000000e9cc37904875b459fa5d0fe37680d36f1ed55e38000000000000000000000000a8ce8aee21bc2a48a5ef670afcc9274c7bbbc03500000000000000000000000000000000000000000000000000000000000009c40000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f0000000000000000000000000000000000000000000000000011c37937e080000000000000000000000000000000000000000000000000000000000000ac46170000000000000000000000000000000000000000000000000000000000000000";
		vm.prank(user);
		zapper.zap{value: 0.01 ether}(WETH9, USDC, WETH9, 10000000000000000, 5000000000000000, 2500, 194300, 196400, user, 8712316318, data);
		uint afterValue = IERC20(manager).balanceOf(user);
		assertEq(beforeValue + 1, afterValue);
		assertEq(address(zapper).balance, 0);
		assertEq(IERC20(USDC).balanceOf(address(zapper)), 0);
		assertEq(IERC20(WETH9).balanceOf(address(zapper)), 0);
	}

	function testZapToEth() public payable {
		uint beforeValue = IERC20(manager).balanceOf(user);
		bytes[] memory data = new bytes[](2);
		data[0] = hex"04e45aaf000000000000000000000000a8ce8aee21bc2a48a5ef670afcc9274c7bbbc035000000000000000000000000e9cc37904875b459fa5d0fe37680d36f1ed55e3800000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000009896800000000000000000000000000000000000000000000000000007840b6663cb810000000000000000000000000000000000000000000000000000000000000000";
		data[1] = hex"49404b7c0000000000000000000000000000000000000000000000000007840b6663cb810000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f";
		vm.prank(user);
		zapper.zap(USDC, USDC, WETH9, 20000000, 10000000, 2500, 194300, 196400, user, 8712316318, data);
		uint afterValue = IERC20(manager).balanceOf(user);
		assertEq(beforeValue + 1, afterValue);
		assertEq(address(zapper).balance, 0);
		assertEq(IERC20(USDC).balanceOf(address(zapper)), 0);
		assertEq(IERC20(WETH9).balanceOf(address(zapper)), 0);
	}

	function testZapWithAnyToken() public payable {
		uint beforeValue = IERC20(manager).balanceOf(user);
		bytes[] memory data = new bytes[](1);
		data[0] = hex"5ae401dc0000000000000000000000000000000000000000000000000000000066135f2800000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e404e45aaf000000000000000000000000df41220c7e322bfef933d85d01821ad277f901720000000000000000000000007746ef546d562b443ae4b4145541a3b1a3d7571700000000000000000000000000000000000000000000000000000000000001f40000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f0000000000000000000000000000000000000000000000001460f9cae3767d7a0000000000000000000000000000000000000000000000000fe4601de378ae74000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
		vm.prank(user);
		zapper.zap(ASTR, vASTR, ASTR, 2936896256635370228, 1468448128317685114, 500, 130, 1170, user, 1712545576, data);
		uint afterValue = IERC20(manager).balanceOf(user);
		assertEq(beforeValue + 1, afterValue);
		assertEq(address(zapper).balance, 0);
		assertEq(IERC20(ASTR).balanceOf(address(zapper)), 0);
		assertEq(IERC20(vASTR).balanceOf(address(zapper)), 0);
	}
	function testrevert() public {
		vm.prank(0xA39144B3764BaF901bf1BF5a186504f2B48FAB96);
		zapper.approver(vASTR, 10000000000000000000000000);
	}
	/*
	function testZapToEth2() public payable {
		uint beforeValue = IERC20(manager).balanceOf(user);
		bytes[] memory data = new bytes[](1);
		data[0] = hex"5ae401dc0000000000000000000000000000000000000000000000000000000066128950000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000e404e45aaf000000000000000000000000a8ce8aee21bc2a48a5ef670afcc9274c7bbbc035000000000000000000000000e9cc37904875b459fa5d0fe37680d36f1ed55e3800000000000000000000000000000000000000000000000000000000000001f4000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000004c4b4000000000000000000000000000000000000000000000000000046424708329db000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004449404b7c00000000000000000000000000000000000000000000000000046424708329db0000000000000000000000005615deb798bb3e4dfa0139dfa1b3d433cc23b72f00000000000000000000000000000000000000000000000000000000";
		vm.prank(user);
		zapper.zap(USDC, USDC, WETH9, 10000000, 5000000, 500, 194590, 195620, user, 9712490838, data);
		uint afterValue = IERC20(manager).balanceOf(user);
		assertEq(beforeValue + 1, afterValue);
		assertEq(address(zapper).balance, 0);
		assertEq(IERC20(USDC).balanceOf(address(zapper)), 0);
		assertEq(IERC20(USDT).balanceOf(address(zapper)), 0);
	}
	*/
}
